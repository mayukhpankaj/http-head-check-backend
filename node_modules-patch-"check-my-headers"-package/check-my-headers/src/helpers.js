const rp = require('request-promise')
const url = require('url');

const isUrlValid = (url = '') => {
  if (typeof (url) !== 'string') return false
  const regex = /(?:^|[ \t])((https?:\/\/)?(?:localhost|[\w-]+(?:\.[\w-]+)+)(:\d+)?(\/\S*)?)/g
  return regex.test(url)
}

// const makeRequest = (uri) => {
//   return rp({
//     uri,
//     transform: (body, { headers, statusCode }) => ({ headers, statusCode })
//   })
// }



const makeRequest = async (uri) => {
  try {
      const options = {
          uri,
          resolveWithFullResponse: true, // This will resolve the promise with the full response object
          transform: (body, { headers, statusCode }) => ({ body, headers, statusCode })
      };

      const response = await rp(options);

      // Extracting server hostname
      const parsedUrl = url.parse(uri);
      const serverHostname = parsedUrl.hostname;

      // Resolving IP address from the hostname
      const ipAddresses = await resolveIpAddress(serverHostname);
      const ipAddress = ipAddresses[0]; // Just taking the first IP address

      return { body: response.body, headers: response.headers, statusCode: response.statusCode, ipAddress , serverHostname };
  } catch (error) {
      console.error('Error:', error);
      throw error;
  }
};

// Function to resolve IP address from hostname
const resolveIpAddress = async (hostname) => {
  return new Promise((resolve, reject) => {
      require('dns').resolve(hostname, (err, addresses) => {
          if (err) {
              reject(err);
          } else {
              resolve(addresses);
          }
      });
  });
};





module.exports = {
  isUrlValid, makeRequest
}
